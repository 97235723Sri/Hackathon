version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: control-panel-db
    environment:
      POSTGRES_DB: control_panel_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - control-panel-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Spring Boot Backend (uncomment when you have Docker image)
  # backend:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   container_name: control-panel-backend
  #   environment:
  #     SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/control_panel_db
  #     SPRING_DATASOURCE_USERNAME: postgres
  #     SPRING_DATASOURCE_PASSWORD: postgres
  #   ports:
  #     - "8080:8080"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   networks:
  #     - control-panel-network

  # Angular Frontend (uncomment when you have Docker image)
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   container_name: control-panel-frontend
  #   ports:
  #     - "4200:80"
  #   depends_on:
  #     - backend
  #   networks:
  #     - control-panel-network

volumes:
  postgres_data:
    driver: local

networks:
  control-panel-network:
    driver: bridge
